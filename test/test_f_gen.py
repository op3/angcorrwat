#  SPDX-License-Identifier: GPL-3.0+
#
# Copyright Â© 2017-2018 O. Papst.
#
# This file is part of angcorrwat.
#
# angcorrwat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# angcorrwat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with angcorrwat.  If not, see <http://www.gnu.org/licenses/>.

import pytest
from angcorrwat import f

def read_f_gen_test_data(filename):
    """
    Read tabulated value of the generalized F-coefficients from a
    structured input file.

    Args:
        filename: Name of the input file

    Returns:
        2D python array that contains the test data
    """

    testdata = []
    file = open(filename)

    for line in file:
        if line[0] is not '#':
            testdata.append([float(word) for word in line.split()])

    return testdata

_I1_VALUES = [1, 4.5, 11.5]
_DATA_FILE_PREFIX = 'test/f_gen_data/f_coeff_'
_LOG_FILE_PREFIX = 'test/f_coeff_'
_LLP = [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 3]]

def matches_test_data(test_data, numerical_tolerance, logfile=None):
    """
    Compare tabulated F-coefficients, given as a python array to
    this function, to the function f of angcorrwat by calling
    f with the tabulated input.

    Args:
        test_data: Array of test data as returned by
            read_f_gen_test_data()
        numerical_tolerance: Acceptance threshold of
            calculated F-coefficients fcalc when comparing
            to tabulated values ftab. A result will be
            assumed to be correct if
            I) ftab - numerical_tolerance < fcalc
                AND 
            II) ftab + numerical_tolerance > fcalc
        logfile: Name of a logfile to which the results of
            the calculations should be written. The default
            value is None, which means that no logfile will
            be created.

    Returns:
        True: if all calculated F-coefficients agree with the
            tabulated values within the numerical tolerance
        False: else
    """

    lfile = None
    if logfile is not None:
        lfile = open(logfile, 'w')
        header  = '  \t  \t    \t    \t   \tL,Lp\n'
        header += 'I2\tI1\tlam2\tlam1\tlam'
        for llp in _LLP:
            header += str(llp[0]) + "," + str(llp[1]) + "\t"
        header += "fcalc\tftab\t+-\n\n"
        lfile.write(header)

    for test in test_data:
        for i, llp in enumerate(_LLP):
            f_gen_calc = (f(llp[0], llp[1],
                test[0], test[1], test[4], test[2], test[3]).
                doit().evalf())

            if logfile is not None:
                message = (str(test[0]) + "\t" + str(test[1]) + "\t" +
                        str(test[2]) + "\t" + str(test[3]) + "\t" +
                        str(test[4]) + "\t" + str(llp[0]) + "\t" + 
                        str(llp[1]) + "\t" + str(f_gen_calc) + "\t" +
                        str(test[5]) + "\t" + str(numerical_tolerance) + "\n"
                        )
                lfile.write(message)

            assert f_gen_calc > test[5+i] - numerical_tolerance
            assert f_gen_calc < test[5+i] + numerical_tolerance

        if logfile is not None:
            lfile.write("\n") 

    if logfile is not None:
        lfile.close()

    return True

def test_f_gen():
    """
    Test the generalized F-coefficients generated by angcorrwat
    by comparing to tabulated values from 

    K.S. Krane et al., At. Data Nucl. Data Tables **11**, 351 (1973)

    The tables can be found in 'VII. TABLE OF GENERALIZED F-COEFFICIENTS'.
    They are sorted by the parameter I1. For each table of I1, a data
    file exists in angcorrwat/test/f_gen_data/ which is called
    f_coeff_{2*I1}. The multiplication by two is to avoid half-integer
    values.
    """

    for i1 in _I1_VALUES:
        filename = _DATA_FILE_PREFIX + str(int(2*i1))
        logfilename = _LOG_FILE_PREFIX + str(int(2*i1)) + ".log"

        test_data = read_f_gen_test_data(filename)
        # In the reference above, values are listed with four-digit
        # precision. Therefore, demand a numerical precision of
        # 10^-4
        assert matches_test_data(test_data, 1e-4, logfile=logfilename)

